{"version":3,"sources":["helpers/getWords.js","App.js","hooks/useFetchWords.js","index.js"],"names":["getWords","numberOfWords","a","url","fetch","resp","json","words","styles","button","backgroundColor","border","borderRadius","color","cursor","fontSize","textDecoration","App","useState","change","setChange","input","setInput","savedText","setSavedText","currentWord","setCurrentWord","miliseconds","setMiliseconds","intervalRef","setIntervalRef","inputRef","useRef","state","setState","useEffect","then","useFetchWords","wordsString","join","letters","split","seconds","Math","floor","length","setInterval","prevMilis","clearInterval","handleClic","prevChange","style","textAlign","map","letter","i","key","ref","autoFocus","onBlur","current","focus","disabled","margin","display","type","value","onChange","e","target","prevSavedText","prevWord","onClick","abs","ReactDOM","render","document","getElementById"],"mappings":"wLAAaA,EAAQ,uCAAE,WAAMC,GAAN,mBAAAC,EAAA,6DAEfC,EAFe,4DAE2CF,GAF3C,SAGHG,MAAOD,GAHJ,cAGfE,EAHe,gBAIDA,EAAKC,OAJJ,cAIfC,EAJe,yBAOdA,GAPc,2CAAF,sDCMfC,EAAQ,CACZC,OAAQ,CACNC,gBAAiB,OACjBC,OAAQ,kBACRC,aAAc,MACdC,MAAO,QACPC,OAAQ,UACRC,SAAU,OACVC,eAAgB,SAIPC,EAAM,WAAO,IAAD,EAEKC,oBAAS,GAFd,mBAEhBC,EAFgB,KAERC,EAFQ,OAGGF,mBAAS,IAHZ,mBAGhBG,EAHgB,KAGTC,EAHS,OAIWJ,mBAAS,IAJpB,mBAIhBK,EAJgB,KAILC,EAJK,OAKeN,mBAAS,GALxB,mBAKhBO,EALgB,KAKHC,EALG,OAMeR,oBAAU,KANzB,mBAMhBS,EANgB,KAMHC,EANG,OAOeV,qBAPf,mBAOhBW,EAPgB,KAOHC,EAPG,KASjBC,EAAWC,mBAEXzB,EC1BqB,WAAmC,IAAjCN,EAAgC,uDAAhB,GAAIkB,EAAY,yCAEnCD,mBAAS,IAF0B,mBAEtDe,EAFsD,KAE/CC,EAF+C,KAa7D,OATAC,qBAAU,WAERnC,EAAUC,GACPmC,MAAM,SAAA7B,GACL2B,EAAS3B,QAGZ,CAACN,EAAekB,IAEZc,EDaMI,CAAc,GAAIlB,GACzBmB,EAAa/B,EAAMgC,KAAK,KACxBC,EAASF,EAAYG,MAAM,IAE3BC,EAASC,KAAKC,MAAMjB,EAAY,KAEtCQ,qBAAU,WACY,IAAjB5B,EAAMsC,SACPjB,GAAgB,KAChBE,EAAegB,aAAY,WACzBlB,GAAe,SAAAmB,GAAS,OAAIA,EAAY,OACvC,QAEJ,CAACxC,IAEJ4B,qBAAU,WACLZ,IAAS,UAAQe,EAAR,MACVU,cAAcnB,KAEf,CAACN,EAAWe,EAAaT,IAE5B,IAcMoB,EAAY,WAChB7B,GAAU,SAAA8B,GAAU,OAAKA,KACzBF,cAAcnB,GACdP,EAAS,IACTE,EAAa,IACbE,EAAe,GACfE,GAAgB,MAwClB,OACE,6BACE,uBAAGuB,MAAO,CAAEpC,SAAU,OAAQqC,UAAW,WAErCZ,EAAQa,KAAI,SAACC,EAAQC,GACnB,OAAGhC,EAAUsB,OAASxB,EAAMwB,QAAUU,EAC7B,0BAAMC,IAAKD,GAAID,GACdA,IAAWjC,EAAMkC,EAAIhC,EAAUsB,SAAWtB,EAAUsB,OAASU,EAC9D,0BAAMC,IAAKD,EAAGJ,MAAO,CAAEtC,MAAO,SAAWyC,GAEzC,0BAAME,IAAKD,EAAGJ,MAAO,CAAEtC,MAAO,QAAUyC,OAMpC,IAAjB/C,EAAMsC,QAEN,2BACEY,IAAK1B,EACL2B,WAAS,EACTC,OAvEU,WAChB5B,EAAS6B,QAAQC,SAuEXC,SACErC,IAAgBlB,EAAMsC,QAAUlB,GAAa,EAE7C,WAEA,GAEFwB,MAAO,CAAEpC,SAAU,OAAQqC,UAAW,SAAUW,OAAQ,SAAUC,QAAS,SAC3EC,KAAK,OACLC,MAAO7C,EACP8C,SA5FiB,SAAAC,GACpBA,EAAEC,OAAOH,QAAT,UAAsB3D,EAAMkB,GAA5B,MACDH,EAAS,IACTE,GAAa,SAAA8C,GAAa,gBAAOA,GAAP,OAAuB/D,EAAMkB,GAA7B,QAC1BC,GAAe,SAAA6C,GAAQ,OAAIA,EAAW,MAEtCjD,EAAS8C,EAAEC,OAAOH,UAkBjB3C,IAAS,UAAQe,EAAR,KAER,yBAAKa,MAAO,CAAEC,UAAW,WACvB,wBAAID,MAAO,CAAEpC,SAAU,OAAQqC,UAAW,WAA1C,eAAkE,0BAAMD,MAAO,CAAEtC,MAAO,QAAU6B,EAAQ,IAAM,IAAKA,EAAnD,IAA6Df,EAAyB,IAAVe,EAAe,IAAM,IAAKf,EAAyB,IAAVe,GAAvL,6BACA,4BACE8B,QAASvB,EACTE,MAAO3C,EAAOC,QAFhB,eAMoB,MAAjBkB,EACA,wBAAIwB,MAAO,CAAEC,UAAW,WAAxB,UACCzB,GAAa,GACrBI,EAAS6B,QAAQC,QAEf,yBAAKV,MAAO,CAAEC,UAAW,WACvB,wBAAID,MAAO,CAAEC,UAAW,SAAWV,EAAQ,IAAM,IAAKA,EAAtD,IAAgEf,EAAyB,IAAVe,EAAe,IAAM,IAAKf,EAAyB,IAAVe,GACxH,4BACE8B,QAASvB,EACTE,MAAO3C,EAAOC,QAFhB,eAQF,yBAAK0C,MAAO,CAAEC,UAAW,WACvB,wBAAID,MAAO,CAAEC,UAAW,WAAaT,KAAK8B,IAAI/B,IAC9C,4BACE8B,QAASvB,EACTE,MAAO3C,EAAOC,QAFhB,gBEhGViE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.112137e6.chunk.js","sourcesContent":["export const getWords= async(numberOfWords) => {\r\n\r\n  const url= `https://random-word-api.herokuapp.com/word?number=${numberOfWords}`\r\n  const resp= await fetch( url );\r\n  const words = await resp.json();\r\n  // const words= data.join(' ');\r\n\r\n  return words;\r\n}","import React from 'react';\r\nimport { useRef } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useFetchWords } from './hooks/useFetchWords';\r\n\r\nconst styles= {\r\n  button: {\r\n    backgroundColor: 'blue',\r\n    border: '1px solid white',\r\n    borderRadius: '5px',\r\n    color: 'white',\r\n    cursor: 'pointer',\r\n    fontSize: '25px',\r\n    textDecoration: 'none'\r\n  }\r\n}\r\n\r\nexport const App = () => {\r\n\r\n  const [change, setChange] = useState(true);\r\n  const [input, setInput] = useState('');\r\n  const [savedText, setSavedText] = useState('');\r\n  const [currentWord, setCurrentWord] = useState(0);\r\n  const [miliseconds, setMiliseconds] = useState(-500);\r\n  const [intervalRef, setIntervalRef] = useState();\r\n\r\n  const inputRef = useRef();\r\n  \r\n  const words= useFetchWords(20, change);\r\n  const wordsString= words.join(' ');\r\n  const letters= wordsString.split('');\r\n  \r\n  const seconds= Math.floor(miliseconds/100);\r\n\r\n  useEffect(() => {\r\n    if(words.length !== 0){\r\n      setMiliseconds(-300);\r\n      setIntervalRef(setInterval(() => {\r\n        setMiliseconds(prevMilis => prevMilis + 1);\r\n      }, 10))\r\n    }\r\n  }, [words]);\r\n\r\n  useEffect(() => {\r\n    if(savedText === `${wordsString} `){\r\n      clearInterval(intervalRef);\r\n    }\r\n  }, [savedText, wordsString, intervalRef]);\r\n\r\n  const handleInputChange= e => {\r\n    if(e.target.value === `${words[currentWord]} `){\r\n      setInput('');\r\n      setSavedText(prevSavedText => `${prevSavedText}${words[currentWord]} `);\r\n      setCurrentWord(prevWord => prevWord + 1);\r\n    } else{\r\n      setInput(e.target.value);\r\n    }\r\n  }\r\n\r\n  const handleBlur= () => {\r\n    inputRef.current.focus();\r\n  }\r\n\r\n  const handleClic= () => {\r\n    setChange(prevChange => !prevChange);\r\n    clearInterval(intervalRef);\r\n    setInput('');\r\n    setSavedText('');\r\n    setCurrentWord(0);\r\n    setMiliseconds(-500);\r\n  }\r\n\r\n  const showTimeAndButton= () => {\r\n    if(savedText === `${wordsString} `){\r\n      return (\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h1 style={{ fontSize: '30px', textAlign: 'center' }}>It took you <span style={{ color: 'red' }}>{seconds<10 && '0'}{seconds}:{miliseconds - (seconds * 100)<10 && '0'}{miliseconds - (seconds * 100)}</span> seconds to type 20 words</h1>\r\n          <button\r\n            onClick={handleClic}\r\n            style={styles.button}\r\n          >Try again</button>\r\n        </div>\r\n      )\r\n    }else if(miliseconds === -500){\r\n      return <h1 style={{ textAlign: 'center' }}>READY?</h1>\r\n    } else if(miliseconds>=0){\r\n      inputRef.current.focus();\r\n      return (\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h1 style={{ textAlign: 'left' }}>{seconds<10 && '0'}{seconds}:{miliseconds - (seconds * 100)<10 && '0'}{miliseconds - (seconds * 100)}</h1>\r\n          <button\r\n            onClick={handleClic}\r\n            style={styles.button}\r\n          >Try again</button>\r\n        </div>\r\n      )\r\n    } else{\r\n      return (\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h1 style={{ textAlign: 'center' }}>{Math.abs(seconds)}</h1>\r\n          <button\r\n            onClick={handleClic}\r\n            style={styles.button}\r\n          >Try again</button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p style={{ fontSize: '30px', textAlign: 'center' }}>\r\n        {\r\n          letters.map((letter, i) => {\r\n            if(savedText.length + input.length <= i){\r\n              return <span key={i}>{letter}</span>\r\n            } else if(letter === input[i - savedText.length] || savedText.length > i){\r\n              return <span key={i} style={{ color: 'blue' }}>{letter}</span>\r\n            } else {\r\n              return <span key={i} style={{ color: 'red' }}>{letter}</span>\r\n            }\r\n          })\r\n        }\r\n      </p>\r\n      {\r\n        words.length !== 0\r\n        &&\r\n        <input\r\n          ref={inputRef}\r\n          autoFocus\r\n          onBlur={handleBlur}\r\n          disabled= {\r\n            currentWord === words.length || miliseconds<=0\r\n            ?\r\n            'disabled'\r\n            :\r\n            ''\r\n          }\r\n          style={{ fontSize: '30px', textAlign: 'center', margin: '0 auto', display: 'block' }}\r\n          type='text'\r\n          value={input}\r\n          onChange={handleInputChange}\r\n        />\r\n      }\r\n      {\r\n        showTimeAndButton()\r\n      }\r\n    </div>\r\n  );\r\n};","import { useState, useEffect } from \"react\";\r\nimport { getWords } from \"../helpers/getWords\";\r\n\r\nexport const useFetchWords = ( numberOfWords = 10, change ) => {\r\n    \r\n  const [state, setState] = useState([]);\r\n\r\n  useEffect(() => {\r\n      \r\n    getWords( numberOfWords )\r\n      .then( words => {\r\n        setState(words)\r\n      })\r\n\r\n  }, [numberOfWords, change]);\r\n\r\n  return state;\r\n\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n// import './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}